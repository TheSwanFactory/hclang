"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const frames_1 = require("../frames");
const terminate = (pipe, parameter) => {
    const finisher = pipe.finish;
    if (finisher instanceof Function) {
        return pipe.finish(parameter);
    }
    const note = frames_1.FrameNote.key(pipe.id, pipe);
    console.error("terminate", pipe);
    return note;
};
class Terminal extends frames_1.Frame {
    constructor(data) {
        super(frames_1.NilContext);
        this.data = data;
        this.is.immediate = true;
    }
    static end() { return new Terminal(terminate); }
    ;
    apply(argument, parameter) {
        return this.data(argument, parameter);
    }
    toData() { return this.data; }
}
exports.Terminal = Terminal;
exports.terminals = {};
const perform = (actions) => {
    return (source, _parameter) => {
        return source.perform(actions);
    };
};
const addTerminal = (char, key) => {
    const action = {};
    action[key] = frames_1.FrameSymbol.for(char);
    exports.terminals[char] = new Terminal(perform(action));
};
function addGroup(grouper) {
    const sample = new grouper([], frames_1.NilContext);
    const open = sample.string_open();
    const close = sample.string_close();
    exports.terminals[open] = new Terminal(perform({ push: grouper }));
    exports.terminals[close] = new Terminal(perform({ pop: grouper }));
}
exports.terminals[frames_1.Frame.kEND] = Terminal.end();
addTerminal("\n", "end");
addTerminal(",", "next");
addTerminal(";", "semi-next");
addGroup(frames_1.FrameArray);
addGroup(frames_1.FrameGroup);
addGroup(frames_1.FrameLazy);
addGroup(frames_1.FrameSchema);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVybWluYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4ZWN1dGUvdGVybWluYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWtKO0FBYWxKLE1BQU0sU0FBUyxHQUFtQixDQUFDLElBQWEsRUFBRSxTQUFnQixFQUFFLEVBQUU7SUFDcEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM3QixJQUFJLFFBQVEsWUFBWSxRQUFRLEVBQUU7UUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQy9CO0lBQ0QsTUFBTSxJQUFJLEdBQUcsa0JBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqQyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQWEsUUFBUyxTQUFRLGNBQUs7SUFHakMsWUFBc0IsSUFBb0I7UUFDeEMsS0FBSyxDQUFDLG1CQUFVLENBQUMsQ0FBQztRQURFLFNBQUksR0FBSixJQUFJLENBQWdCO1FBRXhDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMzQixDQUFDO0lBTE0sTUFBTSxDQUFDLEdBQUcsS0FBSyxPQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUFBLENBQUM7SUFPakQsS0FBSyxDQUFDLFFBQWUsRUFBRSxTQUFnQjtRQUM1QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFUyxNQUFNLEtBQVUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUM5QztBQWJELDRCQWFDO0FBRVksUUFBQSxTQUFTLEdBQVksRUFDakMsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBZ0IsRUFBRSxFQUFFO0lBQ25DLE9BQU8sQ0FBQyxNQUFhLEVBQUUsVUFBaUIsRUFBRSxFQUFFO1FBQzFDLE9BQVEsTUFBcUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFZLEVBQUUsR0FBVyxFQUFFLEVBQUU7SUFDaEQsTUFBTSxNQUFNLEdBQVksRUFBRSxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxvQkFBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxpQkFBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2xELENBQUMsQ0FBQztBQUVGLFNBQVMsUUFBUSxDQUFDLE9BQTBCO0lBQzFDLE1BQU0sTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLEVBQUUsRUFBRSxtQkFBVSxDQUFDLENBQUM7SUFDM0MsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwQyxpQkFBUyxDQUFDLElBQUksQ0FBQyxHQUFJLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsaUJBQVMsQ0FBQyxLQUFLLENBQUMsR0FBSSxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBQyxHQUFHLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFFRCxpQkFBUyxDQUFDLGNBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDdkMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN6QixXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3pCLFdBQVcsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDOUIsUUFBUSxDQUFDLG1CQUFVLENBQUMsQ0FBQztBQUNyQixRQUFRLENBQUMsbUJBQVUsQ0FBQyxDQUFDO0FBQ3JCLFFBQVEsQ0FBQyxrQkFBUyxDQUFDLENBQUM7QUFDcEIsUUFBUSxDQUFDLG9CQUFXLENBQUMsQ0FBQyJ9