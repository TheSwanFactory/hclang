"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const frames_1 = require("../frames");
const terminate = (pipe, parameter) => {
    const finisher = pipe.finish;
    if (finisher instanceof Function) {
        return pipe.finish(parameter);
    }
    const note = frames_1.FrameNote.key(pipe.id, pipe);
    return note;
};
class Terminal extends frames_1.Frame {
    constructor(data) {
        super(frames_1.NilContext);
        this.data = data;
        this.is.immediate = true;
    }
    static end() {
        return new Terminal(terminate);
    }
    ;
    apply(argument, parameter) {
        return this.data(argument, parameter);
    }
    toData() {
        return this.data;
    }
}
exports.Terminal = Terminal;
exports.terminals = {};
const perform = (actions) => {
    return (source, _parameter) => {
        const performer = source;
        return performer.perform(actions);
    };
};
const addTerminal = (char, key) => {
    const action = {};
    action[key] = frames_1.FrameSymbol.for(char);
    exports.terminals[char] = new Terminal(perform(action));
};
function addGroup(Grouper) {
    const sample = new Grouper([], frames_1.NilContext);
    const open = sample.string_open();
    const close = sample.string_close();
    exports.terminals[open] = new Terminal(perform({ push: Grouper }));
    exports.terminals[close] = new Terminal(perform({ pop: Grouper }));
}
exports.terminals[frames_1.Frame.kEND] = Terminal.end();
addTerminal('\n', 'end');
addTerminal(',', 'next');
addTerminal(';', 'semi-next');
addGroup(frames_1.FrameArray);
addGroup(frames_1.FrameGroup);
addGroup(frames_1.FrameLazy);
addGroup(frames_1.FrameSchema);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVybWluYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4ZWN1dGUvdGVybWluYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWlKO0FBYWpKLE1BQU0sU0FBUyxHQUFtQixDQUFDLElBQWEsRUFBRSxTQUFnQixFQUFFLEVBQUU7SUFDcEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtJQUM1QixJQUFJLFFBQVEsWUFBWSxRQUFRLEVBQUU7UUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0tBQzlCO0lBQ0QsTUFBTSxJQUFJLEdBQUcsa0JBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUV6QyxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUMsQ0FBQTtBQUVELE1BQWEsUUFBUyxTQUFRLGNBQUs7SUFLakMsWUFBdUIsSUFBb0I7UUFDekMsS0FBSyxDQUFDLG1CQUFVLENBQUMsQ0FBQTtRQURJLFNBQUksR0FBSixJQUFJLENBQWdCO1FBRXpDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQTtJQUMxQixDQUFDO0lBUE0sTUFBTSxDQUFDLEdBQUc7UUFDZixPQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFBQSxDQUFDO0lBT0ssS0FBSyxDQUFFLFFBQWUsRUFBRSxTQUFnQjtRQUM3QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3ZDLENBQUM7SUFFUyxNQUFNO1FBQ2QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFBO0lBQ2xCLENBQUM7Q0FDRjtBQWpCRCw0QkFpQkM7QUFFWSxRQUFBLFNBQVMsR0FBWSxFQUNqQyxDQUFBO0FBRUQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEVBQUU7SUFDbkMsT0FBTyxDQUFDLE1BQWEsRUFBRSxVQUFpQixFQUFFLEVBQUU7UUFDMUMsTUFBTSxTQUFTLEdBQUcsTUFBb0IsQ0FBQTtRQUN0QyxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDbkMsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBRUQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFZLEVBQUUsR0FBVyxFQUFFLEVBQUU7SUFDaEQsTUFBTSxNQUFNLEdBQVksRUFBRSxDQUFBO0lBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxvQkFBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNuQyxpQkFBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO0FBQ2pELENBQUMsQ0FBQTtBQUVELFNBQVMsUUFBUSxDQUFFLE9BQTBCO0lBQzNDLE1BQU0sTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLEVBQUUsRUFBRSxtQkFBVSxDQUFDLENBQUE7SUFDMUMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ2pDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQTtJQUNuQyxpQkFBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDMUQsaUJBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzVELENBQUM7QUFFRCxpQkFBUyxDQUFDLGNBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDdEMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUN4QixXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQ3hCLFdBQVcsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUE7QUFDN0IsUUFBUSxDQUFDLG1CQUFVLENBQUMsQ0FBQTtBQUNwQixRQUFRLENBQUMsbUJBQVUsQ0FBQyxDQUFBO0FBQ3BCLFFBQVEsQ0FBQyxrQkFBUyxDQUFDLENBQUE7QUFDbkIsUUFBUSxDQUFDLG9CQUFXLENBQUMsQ0FBQSJ9